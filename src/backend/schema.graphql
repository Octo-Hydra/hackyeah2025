enum UserRole {
  USER
  MODERATOR
  ADMIN
}

type User {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  email: String!
  role: UserRole!
  twoFactorEnabled: Boolean!
  reputation: Int
  activeJourney: ActiveJourney
  favoriteConnections: [FavoriteConnection!]
}

type ActiveJourney {
  routeIds: [ID!]!
  lineIds: [ID!]!
  startStopId: ID!
  endStopId: ID!
  startTime: String!
  expectedEndTime: String!
  notifiedIncidentIds: [ID!]
}

type FavoriteConnection {
  id: ID!
  name: String!
  routeIds: [ID!]!
  lineIds: [ID!]!
  startStopId: ID!
  endStopId: ID!
  notifyAlways: Boolean!
  createdAt: String!
}

input ActiveJourneyInput {
  routeIds: [ID!]!
  lineIds: [ID!]!
  startStopId: ID!
  endStopId: ID!
  startTime: String!
  expectedEndTime: String!
}

input FavoriteConnectionInput {
  name: String!
  routeIds: [ID!]!
  lineIds: [ID!]!
  startStopId: ID!
  endStopId: ID!
  notifyAlways: Boolean
}

# Generic result type for operations
type OperationResult {
  success: Boolean!
  message: String
  data: String # Generic data field (userId, token, etc.)
}

type TwoFactorSetup {
  secret: String!
  qrCode: String!
}

type Query {
  me: User
  # Incidents by line (moved from nested UserQuery)
  incidentsByLine(lineId: ID!, transportType: TransportType): [Incident!]!
  # Transit queries
  lines(transportType: TransportType): [Line!]!
  stops(transportType: TransportType): [Stop!]!
  findPath(input: FindPathInput!): JourneyPath
}

type Mutation {
  # Auth mutations
  register(name: String!, email: String!, password: String!): OperationResult!
  verifyEmail(token: String!): OperationResult!
  resendVerificationEmail(email: String!): OperationResult!
  setup2FA: TwoFactorSetup!
  verify2FA(token: String!, secret: String!): OperationResult!
  disable2FA: OperationResult!

  # Incident mutations (combined carrier + user)
  createReport(input: CreateReportInput!): Incident!
  updateReport(id: ID!, input: UpdateReportInput!): Incident!
  deleteReport(id: ID!): OperationResult!
  publishReport(id: ID!): Incident!

  # User journey mutations
  setActiveJourney(input: ActiveJourneyInput!): User!
  clearActiveJourney: User!
  addFavoriteConnection(input: FavoriteConnectionInput!): FavoriteConnection!
  removeFavoriteConnection(id: ID!): OperationResult!
  updateFavoriteConnection(
    id: ID!
    input: FavoriteConnectionInput!
  ): FavoriteConnection!
}

enum IncidentKind {
  INCIDENT
  NETWORK_FAILURE
  VEHICLE_FAILURE
  PEDESTRIAN_ACCIDENT
  TRAFFIC_JAM
  PLATFORM_CHANGES
}

enum TransportType {
  BUS
  RAIL
}

enum IncidentClass {
  CLASS_1
  CLASS_2
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  RESOLVED
}

type Incident {
  id: ID!
  title: String!
  description: String
  kind: IncidentKind!
  incidentClass: IncidentClass!
  status: ReportStatus!
  lines: [Line!]
  reporterLocation: Coordinates
  affectedSegment: IncidentSegment
  createdBy: User
  createdAt: String!
  updatedAt: String!
}

type IncidentSegment {
  startStopId: ID!
  endStopId: ID!
  lineId: ID
  confidence: SegmentConfidence!
}

enum SegmentConfidence {
  HIGH
  MEDIUM
  LOW
}

type Line {
  id: ID!
  name: String!
  transportType: TransportType!
}

input CreateReportInput {
  title: String!
  description: String
  kind: IncidentKind!
  status: ReportStatus
  lineIds: [ID!]
  reporterLocation: CoordinatesInput # User's location when reporting
}

input UpdateReportInput {
  title: String
  description: String
  kind: IncidentKind
  status: ReportStatus
  lineIds: [ID!]
}

# Geographic coordinates
type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

type Stop {
  id: ID!
  name: String!
  coordinates: Coordinates!
  transportType: TransportType!
  platformNumbers: [String!]
}

# Location info for segment endpoints
type SegmentLocation {
  stopId: ID
  stopName: String
  coordinates: Coordinates!
}

# Single segment of a journey
type PathSegment {
  from: SegmentLocation!
  to: SegmentLocation!
  lineId: ID!
  lineName: String
  transportType: TransportType
  departureTime: String
  arrivalTime: String
  duration: Int!
  distance: Int
  platformNumber: String
  hasIncident: Boolean! # Does this segment have an active incident?
  incidentWarning: String # Warning message if incident exists
  incidentSeverity: IncidentSeverity # Severity level
}

enum IncidentSeverity {
  HIGH
  MEDIUM
  LOW
}

# Complete journey path
type JourneyPath {
  segments: [PathSegment!]!
  totalDuration: Int!
  totalTransfers: Int!
  departureTime: String!
  arrivalTime: String!
  warnings: [String!]!
  hasIncidents: Boolean! # Does any segment have incidents?
  affectedSegments: [Int!]! # Indices of segments with incidents
}

# Input for finding a path
input FindPathInput {
  from: CoordinatesInput!
  to: CoordinatesInput!
  departureTime: String
}

type Subscription {
  # General incident updates
  incidentCreated(transportType: TransportType): Incident!
  incidentUpdated(transportType: TransportType): Incident!

  # Line-specific incident updates
  lineIncidentUpdates(lineId: ID!): Incident!

  # User's subscribed lines
  myLinesIncidents(lineIds: [ID!]!): Incident!
}
