enum UserRole {
  USER
  MODERATOR
  ADMIN
}

type User {
  id: ID!
  createdAt: String!
  updatedAt: String!
  name: String!
  email: String!
  role: UserRole!
  twoFactorEnabled: Boolean!
}

type TwoFactorSetup {
  secret: String!
  qrCode: String!
}

type TwoFactorStatus {
  requires2FA: Boolean!
  userExists: Boolean!
}

type TwoFactorResult {
  success: Boolean!
  message: String
}

type Query {
  me: User
  check2FAStatus(username: String!): TwoFactorStatus!
  userQuery: UserQuery
  lines(transportType: TransportType): [Line!]!
  findPath(input: FindPathInput!): JourneyPath
  stops(transportType: TransportType): [Stop!]!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
}

type RegisterResult {
  success: Boolean!
  message: String!
  userId: String
}

type VerifyEmailResult {
  success: Boolean!
  message: String!
}

type ResendVerificationResult {
  success: Boolean!
  message: String!
}

type Mutation {
  register(input: RegisterInput!): RegisterResult!
  verifyEmail(token: String!): VerifyEmailResult!
  resendVerificationEmail(email: String!): ResendVerificationResult!
  setup2FA: TwoFactorSetup!
  verify2FA(token: String!, secret: String!): TwoFactorResult!
  disable2FA: TwoFactorResult!
  carrierMutations: carrierMutation
  userMutations: userMutation
}

type carrierMutation {
  createReport(input: CreateReportInput!): Incident!
  saveDraft(input: CreateReportInput!): Incident!
  updateReport(id: ID!, input: UpdateReportInput!): Incident!
  deleteReport(id: ID!): DeleteResult!
  publishReport(id: ID!): Incident!
}

type userMutation {
  createReport(input: CreateReportInput!): Incident!
}

enum IncidentKind {
  INCIDENT
  NETWORK_FAILURE
  VEHICLE_FAILURE
  PEDESTRIAN_ACCIDENT
  TRAFFIC_JAM
  PLATFORM_CHANGES
}

enum TransportType {
  BUS
  RAIL
}

enum IncidentClass {
  CLASS_1
  CLASS_2
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  RESOLVED
}

type Incident {
  id: ID!
  title: String!
  description: String
  kind: IncidentKind!
  incidentClass: IncidentClass!
  status: ReportStatus!
  lines: [Line!]
  createdBy: User
  createdAt: String!
  updatedAt: String!
}

type Line {
  id: ID!
  name: String!
  transportType: TransportType!
}

input CreateReportInput {
  title: String!
  description: String
  kind: IncidentKind!
  status: ReportStatus
  lineIds: [ID!]
}

input UpdateReportInput {
  title: String
  description: String
  kind: IncidentKind
  status: ReportStatus
  lineIds: [ID!]
}

type DeleteResult {
  success: Boolean!
  message: String
}

type UserQuery {
  incidentsByLine(lineId: ID!, transportType: TransportType): [Incident!]!
}

# Geographic coordinates
type Coordinates {
  latitude: Float!
  longitude: Float!
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

# Stop/Station with location
type Stop {
  id: ID!
  name: String!
  coordinates: Coordinates!
  transportType: TransportType!
  platformNumbers: [String!]
}

# Path segment type
enum SegmentType {
  WALK
  TRANSIT
}

# Location info for segment endpoints
type SegmentLocation {
  stopId: ID
  stopName: String
  coordinates: Coordinates!
}

# Single segment of a journey
type PathSegment {
  segmentType: SegmentType!
  from: SegmentLocation!
  to: SegmentLocation!
  lineId: ID!
  lineName: String
  transportType: TransportType
  departureTime: String
  arrivalTime: String
  duration: Int!
  distance: Int
  platformNumber: String
  warnings: [String!]
}

# Complete journey path
type JourneyPath {
  segments: [PathSegment!]!
  totalDuration: Int!
  totalTransfers: Int!
  departureTime: String!
  arrivalTime: String!
  warnings: [String!]!
}

# Input for finding a path
input FindPathInput {
  startCoordinates: CoordinatesInput!
  endCoordinates: CoordinatesInput!
  departureTime: String
  maxWalkingDistance: Int
}

type Subscription {
  # Real-time incident updates
  incidentCreated(transportType: TransportType): Incident!
  incidentUpdated(transportType: TransportType): Incident!
  incidentResolved(transportType: TransportType): Incident!

  # Line-specific incident updates
  lineIncidentUpdates(lineId: ID!): Incident!

  # All incidents for specific lines (user subscribes to favorite lines)
  myLinesIncidents(lineIds: [ID!]!): Incident!

  # Journey path updates (when incidents affect the route)
  pathAffectedByIncident(
    startCoordinates: CoordinatesInput!
    endCoordinates: CoordinatesInput!
  ): PathAffectedPayload!
}

# Payload when a journey path is affected by an incident
type PathAffectedPayload {
  incident: Incident!
  affectedLines: [Line!]!
  message: String!
  originalPath: JourneyPath
  alternativePath: JourneyPath
}
