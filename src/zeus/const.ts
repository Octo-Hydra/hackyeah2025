/* eslint-disable */

export const AllTypesProps: Record<string,any> = {
	UserRole: "enum" as const,
	ActiveJourneyInput:{
		segments:"PathSegmentInput"
	},
	PathSegmentInput:{
		from:"SegmentLocationInput",
		to:"SegmentLocationInput",
		transportType:"TransportType"
	},
	SegmentLocationInput:{
		coordinates:"CoordinatesInput"
	},
	FavoriteConnectionInput:{

	},
	JourneyNotificationInput:{
		kind:"IncidentKind",
		status:"ReportStatus"
	},
	Query:{
		incidentsByLine:{
			transportType:"TransportType"
		},
		lines:{
			transportType:"TransportType"
		},
		stops:{
			transportType:"TransportType"
		},
		searchStops:{

		},
		findPath:{
			input:"FindPathInput"
		},
		findOptimalJourney:{
			input:"FindOptimalJourneyInput"
		}
	},
	AdminQuery:{
		users:{
			filter:"UserFilterInput",
			pagination:"PaginationInput"
		},
		user:{

		},
		incidents:{
			filter:"IncidentFilterInput",
			pagination:"PaginationInput"
		},
		incident:{

		},
		archivedIncidents:{
			filter:"IncidentFilterInput",
			pagination:"PaginationInput"
		},
		lineIncidentStats:{
			period:"StatsPeriod"
		},
		lineDelayStats:{
			period:"StatsPeriod"
		},
		topDelays:{
			transportType:"TransportType",
			period:"StatsPeriod"
		},
		linesIncidentOverview:{
			period:"StatsPeriod"
		}
	},
	UserFilterInput:{
		role:"UserRole"
	},
	IncidentFilterInput:{
		status:"ReportStatus",
		kind:"IncidentKind",
		transportType:"TransportType"
	},
	PaginationInput:{

	},
	Mutation:{
		register:{

		},
		verifyEmail:{

		},
		resendVerificationEmail:{

		},
		verify2FA:{

		},
		createReport:{
			input:"CreateReportInput"
		},
		updateReport:{
			input:"UpdateReportInput"
		},
		deleteReport:{

		},
		publishReport:{

		},
		resolveReport:{

		},
		setActiveJourney:{
			input:"ActiveJourneyInput"
		},
		addFavoriteConnection:{
			input:"FavoriteConnectionInput"
		},
		removeFavoriteConnection:{

		},
		upsertJourneyNotification:{
			input:"JourneyNotificationInput"
		},
		dismissJourneyNotification:{

		}
	},
	AdminMutation:{
		createUser:{
			input:"CreateUserInput"
		},
		updateUser:{
			input:"UpdateUserInput"
		},
		deleteUser:{

		},
		updateUserRole:{
			role:"UserRole"
		},
		updateUserReputation:{

		},
		createIncident:{
			input:"CreateAdminIncidentInput"
		},
		updateIncident:{
			input:"UpdateAdminIncidentInput"
		},
		deleteIncident:{

		},
		markIncidentAsFake:{

		},
		restoreIncident:{

		},
		bulkResolveIncidents:{

		},
		bulkDeleteIncidents:{

		}
	},
	CreateUserInput:{
		role:"UserRole"
	},
	UpdateUserInput:{
		role:"UserRole"
	},
	CreateAdminIncidentInput:{
		kind:"IncidentKind",
		status:"ReportStatus",
		affectedSegment:"IncidentSegmentInput"
	},
	UpdateAdminIncidentInput:{
		kind:"IncidentKind",
		status:"ReportStatus",
		affectedSegment:"IncidentSegmentInput"
	},
	IncidentSegmentInput:{

	},
	IncidentKind: "enum" as const,
	TransportType: "enum" as const,
	ReportStatus: "enum" as const,
	CreateReportInput:{
		kind:"IncidentKind",
		status:"ReportStatus",
		reporterLocation:"CoordinatesInput"
	},
	UpdateReportInput:{
		kind:"IncidentKind",
		status:"ReportStatus"
	},
	CoordinatesInput:{

	},
	FindPathInput:{
		from:"CoordinatesInput",
		to:"CoordinatesInput"
	},
	FindOptimalJourneyInput:{
		preferredTransportTypes:"TransportType"
	},
	IncidentSeverity: "enum" as const,
	Subscription:{
		incidentCreated:{
			transportType:"TransportType"
		},
		incidentUpdated:{
			transportType:"TransportType"
		},
		lineIncidentUpdates:{

		},
		myLinesIncidents:{

		},
		smartIncidentNotifications:{

		}
	},
	StatsPeriod: "enum" as const,
	ID: `scalar.ID` as const
}

export const ReturnTypes: Record<string,any> = {
	User:{
		id:"ID",
		name:"String",
		email:"String",
		role:"UserRole",
		reputation:"Int",
		trustScore:"Float",
		trustScoreBreakdown:"TrustScoreBreakdown",
		activeJourney:"ActiveJourney",
		journeyNotifications:"JourneyNotification"
	},
	JourneyNotification:{
		id:"ID",
		incidentId:"ID",
		title:"String",
		description:"String",
		kind:"IncidentKind",
		status:"ReportStatus",
		lineId:"ID",
		lineName:"String",
		delayMinutes:"Int",
		receivedAt:"String"
	},
	TrustScoreBreakdown:{
		baseScore:"Float",
		accuracyBonus:"Float",
		highRepBonus:"Float",
		validationRate:"Float",
		updatedAt:"String"
	},
	ActiveJourney:{
		segments:"PathSegment",
		startTime:"String",
		expectedEndTime:"String"
	},
	FavoriteConnection:{
		id:"ID",
		name:"String",
		startStopId:"ID",
		endStopId:"ID"
	},
	OperationResult:{
		success:"Boolean",
		message:"String"
	},
	TwoFactorSetup:{
		secret:"String",
		qrCode:"String"
	},
	Query:{
		me:"User",
		incidentsByLine:"Incident",
		lines:"Line",
		stops:"Stop",
		searchStops:"Stop",
		findPath:"JourneyPath",
		findOptimalJourney:"OptimalJourneyResult",
		admin:"AdminQuery"
	},
	AdminQuery:{
		users:"UserConnection",
		user:"User",
		incidents:"IncidentConnection",
		incident:"Incident",
		archivedIncidents:"IncidentConnection",
		stats:"AdminStats",
		lineIncidentStats:"LineIncidentStats",
		lineDelayStats:"LineDelayStats",
		topDelays:"LineDelayRanking",
		linesIncidentOverview:"LineIncidentOverview"
	},
	AdminStats:{
		totalUsers:"Int",
		totalIncidents:"Int",
		activeIncidents:"Int",
		resolvedIncidents:"Int",
		fakeIncidents:"Int",
		usersByRole:"RoleStats",
		incidentsByKind:"KindStats",
		averageReputation:"Float",
		averageTrustScore:"Float"
	},
	RoleStats:{
		users:"Int",
		moderators:"Int",
		admins:"Int"
	},
	KindStats:{
		kind:"IncidentKind",
		count:"Int"
	},
	UserConnection:{
		items:"User",
		pageInfo:"PageInfo",
		totalCount:"Int"
	},
	IncidentConnection:{
		items:"Incident",
		pageInfo:"PageInfo",
		totalCount:"Int"
	},
	PageInfo:{
		hasNextPage:"Boolean",
		hasPreviousPage:"Boolean",
		startCursor:"String",
		endCursor:"String"
	},
	Mutation:{
		register:"Boolean",
		verifyEmail:"Boolean",
		resendVerificationEmail:"Boolean",
		setup2FA:"TwoFactorSetup",
		verify2FA:"Boolean",
		disable2FA:"Boolean",
		createReport:"Incident",
		updateReport:"Incident",
		deleteReport:"Boolean",
		publishReport:"Incident",
		resolveReport:"Incident",
		setActiveJourney:"ActiveJourney",
		clearActiveJourney:"Boolean",
		addFavoriteConnection:"ID",
		removeFavoriteConnection:"Boolean",
		upsertJourneyNotification:"JourneyNotification",
		dismissJourneyNotification:"Boolean",
		clearJourneyNotifications:"Boolean",
		admin:"AdminMutation"
	},
	AdminMutation:{
		createUser:"User",
		updateUser:"User",
		deleteUser:"Boolean",
		updateUserRole:"User",
		updateUserReputation:"User",
		createIncident:"Incident",
		updateIncident:"Incident",
		deleteIncident:"Boolean",
		markIncidentAsFake:"Incident",
		restoreIncident:"Incident",
		bulkResolveIncidents:"Incident",
		bulkDeleteIncidents:"Boolean"
	},
	Incident:{
		id:"ID",
		title:"String",
		description:"String",
		kind:"IncidentKind",
		status:"ReportStatus",
		lines:"Line",
		affectedSegment:"IncidentSegment",
		delayMinutes:"Int",
		isFake:"Boolean",
		reportedBy:"ID",
		reporter:"User",
		createdAt:"String"
	},
	IncidentSegment:{
		startStopId:"ID",
		endStopId:"ID",
		lineId:"ID"
	},
	Line:{
		id:"ID",
		name:"String",
		transportType:"TransportType"
	},
	Coordinates:{
		latitude:"Float",
		longitude:"Float"
	},
	Stop:{
		id:"ID",
		name:"String",
		coordinates:"Coordinates",
		transportType:"TransportType"
	},
	SegmentLocation:{
		stopId:"ID",
		stopName:"String",
		coordinates:"Coordinates"
	},
	PathSegment:{
		from:"SegmentLocation",
		to:"SegmentLocation",
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		departureTime:"String",
		arrivalTime:"String",
		duration:"Int",
		hasIncident:"Boolean",
		warning:"PathWarning"
	},
	PathWarning:{
		fromStop:"String",
		toStop:"String",
		lineName:"String",
		description:"String",
		incidentKind:"IncidentKind",
		severity:"String"
	},
	JourneyPath:{
		segments:"PathSegment",
		totalDuration:"Int",
		departureTime:"String",
		arrivalTime:"String",
		hasIncidents:"Boolean"
	},
	OptimalJourneyResult:{
		journeys:"Journey",
		hasAlternatives:"Boolean"
	},
	Journey:{
		segments:"JourneySegment",
		totalDuration:"Int",
		totalDistance:"Float",
		transferCount:"Int",
		hasIncidents:"Boolean",
		departureTime:"String",
		arrivalTime:"String",
		alternativeAvailable:"Boolean"
	},
	JourneySegment:{
		from:"SegmentLocation",
		to:"SegmentLocation",
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		departureTime:"String",
		arrivalTime:"String",
		duration:"Int",
		hasIncident:"Boolean",
		incidentDelay:"Int",
		incidentSeverity:"IncidentSeverity"
	},
	Subscription:{
		incidentCreated:"Incident",
		incidentUpdated:"Incident",
		lineIncidentUpdates:"Incident",
		myLinesIncidents:"Incident",
		smartIncidentNotifications:"Incident"
	},
	LineIncidentStats:{
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		period:"StatsPeriod",
		totalIncidents:"Int",
		incidentsByKind:"IncidentKindCount",
		averageDelayMinutes:"Float",
		timeline:"IncidentTimelineEntry"
	},
	IncidentKindCount:{
		kind:"IncidentKind",
		count:"Int"
	},
	IncidentTimelineEntry:{
		timestamp:"String",
		incidentCount:"Int"
	},
	LineDelayStats:{
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		period:"StatsPeriod",
		totalDelays:"Int",
		averageDelayMinutes:"Float",
		maxDelayMinutes:"Int",
		minDelayMinutes:"Int",
		delayDistribution:"DelayBucket"
	},
	DelayBucket:{
		rangeLabel:"String",
		count:"Int"
	},
	LineDelayRanking:{
		rank:"Int",
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		totalDelays:"Int",
		averageDelayMinutes:"Float",
		incidentCount:"Int"
	},
	LineIncidentOverview:{
		lineId:"ID",
		lineName:"String",
		transportType:"TransportType",
		incidentCount:"Int",
		lastIncidentTime:"String"
	},
	ID: `scalar.ID` as const
}

export const Ops = {
query: "Query" as const,
	mutation: "Mutation" as const,
	subscription: "Subscription" as const
}